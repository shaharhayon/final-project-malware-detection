import pandas as pd
import numpy as np

def port_to_num(port):
  try:
    return int(port)
  except:
    return int(port , 16)

def _strip(x):
  try:
    return x.strip()
  except:
    return np.nan

def fix_df_columns(df):
    cols = ['Dur', 'Sport', 'Dport', 'sTos', 'TotPkts', 'TotBytes', 'SrcBytes',
       'Dir_->', 'Dir_<-', 'Dir_<->', 'Dir_<?>', 'Dir_?>', 'Dir_who',
       'Proto_arp', 'Proto_icmp', 'Proto_igmp', 'Proto_llc', 'Proto_tcp',
       'Proto_udp', 'State_A_A', 'State_A_PA', 'State_CON', 'State_FA_',
       'State_FA_FA', 'State_FA_FRA', 'State_FPA_FA', 'State_FPA_FPA',
       'State_FPA_RPA', 'State_FRA_PA', 'State_FRPA_FRPA', 'State_FSA_FPA',
       'State_FSA_FSA', 'State_FSA_FSRA', 'State_FSA_SA', 'State_FSA_SRA',
       'State_FSPA_FSA', 'State_FSPA_FSPA', 'State_FSPA_FSRA',
       'State_FSPA_FSRPA', 'State_FSPA_SA', 'State_FSPA_SPA', 'State_FSPA_SRA',
       'State_FSPA_SRPA', 'State_FSRA_FSA', 'State_FSRA_FSPA',
       'State_FSRA_FSRPA', 'State_FSRA_SA', 'State_FSRA_SPA',
       'State_FSRPA_FSPA', 'State_FSRPA_FSRPA', 'State_FSRPA_SA',
       'State_FSRPA_SPA', 'State_FSRPA_SRA', 'State_FSRPA_SRPA', 'State_INT',
       'State_PA_A', 'State_PA_FPA', 'State_PA_FRPA', 'State_PA_PA',
       'State_PA_RA', 'State_PA_RPA', 'State_RA_', 'State_REQ',
       'State_RPA_FPA', 'State_RPA_FRPA', 'State_RPA_PA', 'State_RSP',
       'State_SA_', 'State_SA_SPA', 'State_SA_SRA', 'State_SPA_FSPA',
       'State_SPA_FSRPA', 'State_SPA_SA', 'State_SPA_SPA', 'State_SPA_SRA',
       'State_SPA_SRPA', 'State_SRA_FSPA', 'State_SRA_SA', 'State_SRA_SPA',
       'State_SRA_SRA', 'State_SRPA_FSPA', 'State_SRPA_FSRPA', 'State_SRPA_SA',
       'State_SRPA_SPA', 'State_SRPA_SRPA', 'State_SR_SA', 'State_S_',
       'State_S_FRA', 'State_S_R', 'State_S_RA', 'State_TXD', 'State_URH',
       'State_URN', 'State_URP']
    for c in cols:
        try:
            df.insert(0, c, 0) 
        except:
            continue
    return df[cols]


def apply_changes(df):
  df.Sport = df.Sport.fillna(-1).apply(port_to_num)
  df.Dport = df.Dport.fillna(-1).apply(port_to_num)
  df.State = df.State.apply(_strip)
  df.Proto = df.Proto.apply(_strip)
  df.Dir = df.Dir.apply(_strip)
  df.dropna(axis= 0, subset= ["Dir" , "Proto" , "State"], inplace = True)
  df.sTos.fillna(0, inplace= True )
  df = pd.get_dummies(df, columns = ["Dir" , "Proto" , "State"])
  return fix_df_columns(df)

def report(metric, y_pred):
    _len =  y_pred.shape[0]
    print("metric=", metric)
    print("Number of samples:", _len, "| % of Normal:", '{:.2f}'.format((y_pred[y_pred == 1]).shape[0]/_len), "| % of Infected:", '{:.2f}'.format((y_pred[y_pred == 0]).shape[0]/_len))
    print()
