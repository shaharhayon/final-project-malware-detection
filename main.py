import argparse
import joblib
from utils import *
from xgboost import XGBClassifier


def main(Args):
    metrics = Args.metric
    file = Args.file_name

    preprocessing = [joblib.load("Models/TruncatedSVD.pkl"),joblib.load("Models/StandardScaler.pkl")] 
    models = []
    if 'a' in metrics:
        models.append(("accuracy",joblib.load("Models/RandomForest_Model.pkl")))
    if 'r' in metrics:
        models.append(("recall",joblib.load("Models/DT_Model.pkl")))
    if 'p' in metrics:
        bst = XGBClassifier()
        bst.load_model("Models/XGB_Model.bin")
        models.append(("precision",bst))
    
    X = apply_changes(pd.read_csv(file))
    for proc in preprocessing:
        X = proc.transform(X)
    
    y_preds = []
    for m in models:
        y_preds.append((m[0],m[1].predict(X)))
    
    for y in y_preds:
        report(y[0], y[1])
    

def ParseArgs():
    Args =  argparse.ArgumentParser(description="Classification of Network Flow")
    Args.add_argument("metric", default= "a",
                      help="The type of metric 'a' for accuracy , 'r' for recall and 'p' for precision. can have multiple matrics: 'arp' for accuracy recall and precision")
    Args.add_argument("file_name", help= "the name and path of netflow file")
    return Args.parse_args()

if __name__ == "__main__":
    main(ParseArgs())